{
  "getChainStorage": "function getChainStorage() returns (tuple(tuple(uint32 shortFundingBaseRate8H, uint32 shortFundingLimitRate8H, uint32 fundingInterval, uint32 liquidityBaseFeeRate, uint32 liquidityDynamicFeeRate, uint96 mlpPriceLowerBound, uint96 mlpPriceUpperBound, uint32 lastFundingTime, uint32 sequence, uint32 strictStableDeviation) pool, tuple(bytes32 symbol, address tokenAddress, address muxTokenAddress, uint8 id, uint8 decimals, uint56 flags, uint32 initialMarginRate, uint32 maintenanceMarginRate, uint32 positionFeeRate, uint32 liquidationFeeRate, uint32 minProfitRate, uint32 minProfitTime, uint96 maxLongPositionSize, uint96 maxShortPositionSize, uint32 spotWeight, uint32 longFundingBaseRate8H, uint32 longFundingLimitRate8H, uint8 referenceOracleType, address referenceOracle, uint32 referenceDeviation, uint32 halfSpread, uint128 longCumulativeFundingRate, uint128 shortCumulativeFunding, uint96 spotLiquidity, uint96 credit, uint96 totalLongPosition, uint96 totalShortPosition, uint96 averageLongPrice, uint96 averageShortPrice, uint128 collectedFee, uint256 deduct)[] assets, tuple(uint8 dexId, uint8 dexType, uint8[] assetIds, uint32[] assetWeightInDEX, uint256[] totalSpotInDEX, uint32 dexWeight, uint256 dexLPBalance, uint256[] liquidityBalance)[] dexes, uint32 liquidityLockPeriod, uint32 marketOrderTimeout, uint32 maxLimitOrderTimeout, uint256 lpDeduct, uint256 stableDeduct, bool isPositionOrderPaused, bool isLiquidityOrderPaused) chain)",
  "pool": "address:pool"
}